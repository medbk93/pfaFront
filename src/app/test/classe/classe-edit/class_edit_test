import {Component, Inject, OnInit} from '@angular/core';
import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';
import {Classe} from '../../tests/models/classe';
import {Level} from '../../models/level';
import {Speciality} from '../../models/speciality';
import {Department} from '../../models/department';
import {SpecialityService} from '../../services/speciality.service';
import {DepartmentService} from '../../services/department.service';
import {LevelService} from '../../services/level.service';
import {FormGroup, FormBuilder} from '@angular/forms';

@Component({
  selector: 'app-classe-edit',
  templateUrl: './classe-edit.component.html',
  styleUrls: ['./classe-edit.component.scss']
})
export class ClasseEditComponent implements OnInit {
  classe: Classe;
  classForm: FormGroup;
  specialities: Speciality[];
  departments: Department[];
  levels: Level[];
  flag: number;
  constructor(
    private dialogRef: MatDialogRef<ClasseEditComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private _speciality: SpecialityService,
    private _department: DepartmentService,
    private _level: LevelService,
    private fb: FormBuilder) {

  }

  ngOnInit() {
    this.flag = this.data.flag;
    this.classForm = this.fb.group({
      nom: '',
      capacite: '',
      nbrGroupe: '',
      niveau: '',
      nivSpecialite: this.fb.group({
        specialite: this.fb.group({
          nom: '',
          departement: ''
        })
      })
    });
    this._speciality.getAll().subscribe(result => {
      this.specialities = result;
      console.log(this.specialities);
    });
    this._department.getAll().subscribe(result => {
      this.departments = result;
      console.log(this.departments);
    });
    this._level.getAllLevel().subscribe(result => {
      this.levels = result;
      console.log(this.levels);
    });
    if (this.data.flag === 0) {
      this.classe = this.initializeClass();
    } else {
      this.classe = this.data.classe;
      this.populateFormValue();
    }
    console.log(this.classe);
  }
  populateFormValue() {
    this.classForm.setValue({
      nom: this.classe.nom,
      capacity: this.classe.capacite,
      groupeNbr: this.classe.nbrGroupe,
      level: this.classe.nivSpecialite.niveau.niveau,
      speciality: this.classe.nivSpecialite.specialite.nom,
      department: this.classe.nivSpecialite.specialite.departement.nom
    });
  }

  save() {
    // Copy the form values over the product object values
    console.log(this.classForm.value);
    console.log(this.classe);
    const p = Object.assign({}, this.classe, this.classForm.value);
    console.log(p);
    this.dialogRef.close(this.classe);
  }
  dismiss() {
    this.dialogRef.close(null);
  }

  private initializeClass(): Classe {
    return {
      id: 0,
      nom: null,
      capacite: null,
      nbrGroupe: null,
      nivSpecialite: {
        id: 0,
        niveau: {
          niveau: null
        },
        specialite: {
          id: 0,
          nom: null,
          departement: {
            id: 0,
            ecole: {
              id: 0,
              nom: null
            },
            nom: null
          }
        }
      }
    };
  }
}



/////////////////////////////////////
<h2 mat-dialog-title style="color:#3f51b5;"><strong>Ajouter une nouvelle classe</strong></h2>
<mat-dialog-content>
  <form [formGroup]="classForm">
    <div class="example-container">
      <mat-form-field>
        <input matInput placeholder="Nom de la classe" formControlName="nom">
      </mat-form-field>

      <mat-form-field>
        <input matInput placeholder="Capacité de la classe" formControlName="capacite">
      </mat-form-field>

      <table class="example-full-width" cellspacing="0"><tr>
        <td>
          <mat-form-field class="example-full-width">
            <input matInput placeholder="Nombre des groupes" formControlName="nbrGroupe">
          </mat-form-field></td>&nbsp;
        <!--<td><mat-form-field class="example-full-width">-->
          <!--<mat-select placeholder="Niveau" [formControlName]="niveau">-->
            <!--&lt;!&ndash;<mat-select-trigger>{{ classe.nivSpecialite.specialite.departement.nom }}</mat-select-trigger>&ndash;&gt;-->
            <!--<mat-option-->
              <!--*ngFor="let level of levels" [value]="level.niveau">{{ level.niveau }}</mat-option>-->
          <!--</mat-select>      </mat-form-field></td>-->
      </tr></table>


      <div formGroupName="nivSpecialite">
        <div formGroupName="specialite">
          <mat-form-field>
            <mat-select placeholder="Spécialité" formControlName="nom">
              <!--<mat-select-trigger>{{ classe.nivSpecialite.specialite.departement.nom }}</mat-select-trigger>-->
              <mat-option
                *ngFor="let speciality of specialities" [value]="speciality.nom">{{ speciality.nom }}</mat-option>
            </mat-select>
          </mat-form-field>

          <mat-form-field>
            <mat-select placeholder="Departement" formControlName="departement">
              <!--<mat-select-trigger>{{ classe.nivSpecialite.specialite.departement.nom }}</mat-select-trigger>-->
              <mat-option
                *ngFor="let department of departments" [value]="department">{{ department.nom }}</mat-option>
            </mat-select>
          </mat-form-field>
        </div>


      </div>

    </div>
  </form>

</mat-dialog-content>
<mat-dialog-actions>
  <button mat-button color="primary" (click)="save()">
    <mat-icon>save</mat-icon> Sauvegarder
  </button>
  <button mat-button color="primary" (click)="dismiss()">
    <mat-icon>cancel</mat-icon> Annuler
  </button>
</mat-dialog-actions>
